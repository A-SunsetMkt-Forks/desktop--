diff --git a/browser/components/customizableui/CustomizableUI.sys.mjs b/browser/components/customizableui/CustomizableUI.sys.mjs
index b953d7d2c8fa7fe2d320bd7cb7af9aeeef0abc86..5b6d9e858ae1e55158eefc50d6aac67763ef7e00 100644
--- a/browser/components/customizableui/CustomizableUI.sys.mjs
+++ b/browser/components/customizableui/CustomizableUI.sys.mjs
@@ -13,6 +13,7 @@ ChromeUtils.defineESModuleGetters(lazy, {
   AddonManagerPrivate: "resource://gre/modules/AddonManager.sys.mjs",
   BrowserUsageTelemetry: "resource:///modules/BrowserUsageTelemetry.sys.mjs",
   CustomizableWidgets: "resource:///modules/CustomizableWidgets.sys.mjs",
+  ZenCustomizableUI: "chrome://browser/content/ZenCustomizableUI.sys.mjs",
   HomePage: "resource:///modules/HomePage.sys.mjs",
   PanelMultiView: "resource:///modules/PanelMultiView.sys.mjs",
   PrivateBrowsingUtils: "resource://gre/modules/PrivateBrowsingUtils.sys.mjs",
@@ -25,7 +26,7 @@ ChromeUtils.defineLazyGetter(lazy, "gWidgetsBundle", function () {
   return Services.strings.createBundle(kUrl);
 });
 
-const kDefaultThemeID = "default-theme@mozilla.org";
+const kDefaultThemeID = "firefox-compact-dark@mozilla.org";
 
 const kSpecialWidgetPfx = "customizableui-special-";
 
@@ -307,13 +308,11 @@ var CustomizableUIInternal = {
       "spring",
       "urlbar-container",
       "spring",
-      "save-to-pocket-button",
-      "downloads-button",
+//    "downloads-button",
       AppConstants.MOZ_DEV_EDITION ? "developer-button" : null,
-      "fxa-toolbar-menu-button",
       lazy.resetPBMToolbarButtonEnabled ? "reset-pbm-toolbar-button" : null,
     ].filter(name => name);
-
+    lazy.ZenCustomizableUI.startup(this);
     this.registerArea(
       CustomizableUI.AREA_NAVBAR,
       {
@@ -321,7 +320,6 @@ var CustomizableUIInternal = {
         overflowable: true,
         defaultPlacements: navbarPlacements,
         verticalTabsDefaultPlacements: [
-          "firefox-view-button",
           "alltabs-button",
         ],
         defaultCollapsed: false,
@@ -346,10 +344,7 @@ var CustomizableUIInternal = {
       {
         type: CustomizableUI.TYPE_TOOLBAR,
         defaultPlacements: [
-          "firefox-view-button",
           "tabbrowser-tabs",
-          "new-tab-button",
-          "alltabs-button",
         ],
         verticalTabsDefaultPlacements: [],
         defaultCollapsed: null,
@@ -412,6 +407,7 @@ var CustomizableUIInternal = {
       CustomizableUI.AREA_NAVBAR,
       CustomizableUI.AREA_BOOKMARKS,
       CustomizableUI.AREA_TABSTRIP,
+      "zen-sidebar-top-buttons",
     ]);
     if (AppConstants.platform != "macosx") {
       toolbars.add(CustomizableUI.AREA_MENUBAR);
@@ -1127,6 +1123,9 @@ var CustomizableUIInternal = {
         placements = gPlacements.get(area);
       }
 
+      // remove "zen-sidebar-top-buttons" from the placements
+      placements = placements.filter(p => p != "zen-sidebar-top-buttons");
+
       // For toolbars that need it, mark as dirty.
       let defaultPlacements = areaProperties.get("defaultPlacements");
       if (
@@ -1540,7 +1539,7 @@ var CustomizableUIInternal = {
         lazy.log.info(
           "Widget " + aWidgetId + " not found, unable to remove from " + aArea
         );
-        continue;
+     // continue;
       }
 
       this.notifyDOMChange(widgetNode, null, container, true, () => {
@@ -1550,7 +1549,7 @@ var CustomizableUIInternal = {
         // We also need to remove the panel context menu if it's there:
         this.ensureButtonContextMenu(widgetNode);
         if (gPalette.has(aWidgetId) || this.isSpecialWidget(aWidgetId)) {
-          container.removeChild(widgetNode);
+          widgetNode.remove();
         } else {
           window.gNavToolbox.palette.appendChild(widgetNode);
         }
@@ -2654,7 +2653,6 @@ var CustomizableUIInternal = {
     if (!this.isWidgetRemovable(aWidgetId)) {
       return;
     }
-
     let placements = gPlacements.get(oldPlacement.area);
     let position = placements.indexOf(aWidgetId);
     if (position != -1) {
@@ -3609,7 +3607,7 @@ var CustomizableUIInternal = {
     }
   },
 
-  _rebuildRegisteredAreas() {
+  _rebuildRegisteredAreas(zenDontRebuildCollapsed = false) {
     for (let [areaId, areaNodes] of gBuildAreas) {
       let placements = gPlacements.get(areaId);
       let isFirstChangedToolbar = true;
@@ -3620,7 +3618,7 @@ var CustomizableUIInternal = {
         if (area.get("type") == CustomizableUI.TYPE_TOOLBAR) {
           let defaultCollapsed = area.get("defaultCollapsed");
           let win = areaNode.ownerGlobal;
-          if (defaultCollapsed !== null) {
+          if (defaultCollapsed !== null && !zenDontRebuildCollapsed) {
             win.setToolbarVisibility(
               areaNode,
               typeof defaultCollapsed == "string"
@@ -4583,6 +4581,7 @@ export var CustomizableUI = {
   unregisterArea(aName, aDestroyPlacements) {
     CustomizableUIInternal.unregisterArea(aName, aDestroyPlacements);
   },
+  get zenInternalCU() { return CustomizableUIInternal; },
   /**
    * Add a widget to an area.
    * If the area to which you try to add is not known to CustomizableUI,
@@ -6404,7 +6403,8 @@ class OverflowableToolbar {
         this.#target
       );
       totalAvailWidth =
-        getInlineSize(this.#toolbar) -
+        (parseInt(this.#toolbar.closest("#navigator-toolbox")?.getAttribute("width")) ||
+        getInlineSize(this.#toolbar)) -
         parseFloat(style.paddingLeft) -
         parseFloat(style.paddingRight) -
         toolbarChildrenWidth;
@@ -6516,7 +6516,7 @@ class OverflowableToolbar {
         }
       }
       if (!inserted) {
-        this.#target.appendChild(child);
+        win.gZenVerticalTabsManager.appendCustomizableItem(this.#target, child, gPlacements.get(this.#toolbar.id));
       }
       child.removeAttribute("cui-anchorid");
       child.removeAttribute("overflowedItem");
